name: Build Nameless OPlus SM8250 Kernel

on:
  workflow_dispatch:

env:
  TZ: Asia/Kolkata
  ARCH: arm64
  KERNEL_CONFIG: vendor/kona-perf_defconfig vendor/debugfs.config
  FULL_CONFIG: arch/arm64/configs/vendor/kona-perf_defconfig

permissions:
  contents: write

jobs:
  build:
    name: Build Kernel (${{ matrix.ksu_type }} KSU)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ksu_type: [Next, Next-Susfs]
        include:
          - ksu_type: Next
            ksu_setup_command: curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -
          - ksu_type: Next-Susfs
            ksu_setup_command: curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Checkout Kernel
      uses: actions/checkout@v4
      with:
        repository: Nameless-AOSP-OSS/kernel_oneplus_sm8250
        path: kernel_workspace/android-kernel
        ref: fifteen
        fetch-depth: 1
        submodules: true

    - name: Checkout SusFs
      if: matrix.ksu_type == 'Next-Susfs'
      run: |
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b kernel-4.19 kernel_workspace/susfs4ksu --depth=1

    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(date "+%y%m%d_%H%M")" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get -y install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib bzip2 libbz2-dev liblz4-tool make squashfs-tools dpkg-dev libssl-dev python3 bc libc6-dev-i386 libncurses5-dev libgit2-dev

    - name: Download Clang-aosp
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir clang
        wget -q https://github.com/ZyCromerZ/Clang/releases/download/21.0.0git-20250423-release/Clang-21.0.0git-20250423.tar.gz -O clang.tar.gz
        tar -C clang/ -zxvf clang.tar.gz
        
    - name: Setup KernelSU (${{ matrix.ksu_type }})
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        ${{ matrix.ksu_setup_command }}
        KSU_VERSION=$(cd KernelSU-Next && expr $(/usr/bin/git rev-list --count HEAD) + 10200)
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
    
    - name: Setup SuSFS
      if: matrix.ksu_type == 'Next-Susfs' 
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/susfs4ksu
        cp ./kernel_patches/fs/* $GITHUB_WORKSPACE/kernel_workspace/android-kernel/fs/
        cp ./kernel_patches/include/linux/* $GITHUB_WORKSPACE/kernel_workspace/android-kernel/include/linux/
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        patch -p1 < $GITHUB_WORKSPACE/patches/50_add_susfs_in_kernel-4.19.patch
        bash $GITHUB_WORKSPACE/patches/patches.sh
        echo "CONFIG_KSU=y" >> $FULL_CONFIG
        echo "CONFIG_KSU_SUSFS=y" >> $FULL_CONFIG
        echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> $FULL_CONFIG
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> $FULL_CONFIG
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> $FULL_CONFIG
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> $FULL_CONFIG
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> $FULL_CONFIG
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> $FULL_CONFIG
        echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> $FULL_CONFIG
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> $FULL_CONFIG
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> $FULL_CONFIG
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> $FULL_CONFIG
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> $FULL_CONFIG
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> $FULL_CONFIG
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> $FULL_CONFIG
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> $FULL_CONFIG
        echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> $FULL_CONFIG
        echo "CONFIG_KPROBES=n" >> $FULL_CONFIG
        echo "CONFIG_KSU_WITH_KPROBES=n" >> $FULL_CONFIG
    
    - name: Setup Kernel KPROBES
      if: matrix.ksu_type == 'Next'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        echo "CONFIG_KPROBES=y" >> $FULL_CONFIG
        echo "CONFIG_KSU_WITH_KPROBES=y" >> $FULL_CONFIG
        echo "CONFIG_HAVE_KPROBES=y" >> $FULL_CONFIG
        echo "CONFIG_KPROBE_EVENTS=y" >> $FULL_CONFIG

    - name: Patch Kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        patch -p1 < $GITHUB_WORKSPACE/patches/fix_cgroup.patch
        patch -p1 < $GITHUB_WORKSPACE/patches/fix_path_unmount.patch
        cd scripts
        sed -i 's/ -dirty//g' setlocalversion
        cd ..
        cat $GITHUB_WORKSPACE/patches/deconfig >> $FULL_CONFIG

    - name:  Setup Configuration for Kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        export ARCH=arm64
        export SUBARCH=arm64
        export BRAND_SHOW_FLAG=oneplus
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin:$PATH
        export KBUILD_BUILD_HOST=Github-Action
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
        BA_CMD="CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-android-"
        EX_CMD="LD=ld.lld LLVM=1 LLVM_IAS=1"
        make O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD $KERNEL_CONFIG
        make -j$(nproc --all) O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD

    - name: Prepare AnyKernel3 (${{ matrix.ksu_type }} KSU)
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/osm0sis/AnyKernel3 --depth=1 AnyKernel3
        sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
        sed -i 's!BLOCK=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!BLOCK=auto;!g' AnyKernel3/anykernel.sh
        sed -i 's/IS_SLOT_DEVICE=0;/IS_SLOT_DEVICE=auto;/g' AnyKernel3/anykernel.sh
        cp android-kernel/out/arch/arm64/boot/Image AnyKernel3/
        rm -rf AnyKernel3/.git* AnyKernel3/README.md

    - name: Upload AnyKernel3 (${{ matrix.ksu_type }} KSU)
      uses: actions/upload-artifact@v4
      with:
        name: AK3-Nameless-OPlus-SM8250-${{ matrix.ksu_type }}-KSU_${{ env.KSUVER }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/AnyKernel3/*

    # - name: Compress AnyKernel3 (${{ matrix.ksu_type }} KSU)
    #   run: |
    #     mkdir $GITHUB_WORKSPACE/dist
    #     cd $GITHUB_WORKSPACE/kernel_workspace/AnyKernel3
    #     zip -r9 $GITHUB_WORKSPACE/dist/AK3-Nameless-OPlus-SM8250-${{ matrix.ksu_type }}-KSU_${{ env.KSUVER }}-${{ env.BUILD_TIME }}.zip ./*


    # - name: Upload AnyKernel3 (${{ matrix.ksu_type }} KSU)
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: kernel-${{ matrix.ksu_type }}
    #     path: $GITHUB_WORKSPACE/dist/

  # publish-release:
  #   name: Publish Release
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: success()
  #   steps:
  #     - name: Download All Artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: dist
  #         pattern: kernel-*
  #         merge-multiple: true

  #     - name: Create or Update GitHub Release
  #       uses: ncipollo/release-action@v1
  #       with:
  #         tag: latest
  #         artifacts: "dist/**/*.zip"
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         allowUpdates: true
  #         replacesArtifacts: true
  #         prerelease: false
